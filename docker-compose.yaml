version: '3.8'

networks:
  microservices-net:
    driver: bridge
net
volumes:
  mysql_data:
  grafana_data:

services:
  mysql:
    image: mysql:8.0
    container_name: mysql-2
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: microservices_db
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 10s
      retries: 5
      start_period: 10s

  user-service:
    build: ./user-service
    container_name: user-service
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      DB_HOST: mysql
      DB_USER: root
      DB_PASSWORD: password
      DB_NAME: microservices_db
    networks:
      - microservices-net
    depends_on:
      mysql:
        condition: service_healthy # Waits for the healthcheck to pass

  product-service:
    build: ./product-service
    container_name: product-service
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      DB_HOST: mysql
      DB_USER: root
      DB_PASSWORD: password
      DB_NAME: microservices_db
    networks:
      - microservices-net
    depends_on:
      mysql:
        condition: service_healthy

  order-service:
    build: ./order-service
    container_name: order-service
    restart: unless-stopped
    ports:
      - "3003:3003"
    environment:
      DB_HOST: mysql
      DB_USER: root
      DB_PASSWORD: password
      DB_NAME: microservices_db
    networks:
      - microservices-net
    depends_on:
      mysql:
        condition: service_healthy
      product-service:
        condition: service_started

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yml 
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - microservices-net

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - microservices-net
    depends_on:
      - prometheus